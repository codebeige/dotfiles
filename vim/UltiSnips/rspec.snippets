snippet rs "require spec helper" b
require 'spec_helper'
endsnippet

snippet rr "require rails helper" b
require 'rails_helper'
endsnippet

snippet d "describe" b
describe '$1' do
  ${2:# TODO: add examples}
end
endsnippet

snippet c "context" b
context '$1' do
  ${2:# TODO: add examples}
end
endsnippet

snippet i "example" b
it '$1' do
  ${2:pending 'not implemented'}
end
endsnippet

snippet l "let" b
let(${1::fixture}) { $2 }
endsnippet

snippet b "before each" b
before do
  ${2:# TODO: implement setup}
end
endsnippet

snippet e "expectation" b
expect($1).to $0
endsnippet

snippet er "method expectation" b
expect(${1:double}).to receive(${2::message})${3/.+/(?0:.with\()/}${3:args}${3/.+/(?0:\))/} { ${4:nil} }
endsnippet

snippet ar "method stub" b
allow(${1:double}).to receive(${2::message})${3/.+/(?0:.with\()/}${3:args}${3/.+/(?0:\))/} { ${4:nil} }
endsnippet

snippet f "feature" b
feature '$1' do
  ${2:# TODO: add examples}
end
endsnippet

snippet s "scenario" b
scenario '$1' do
  ${2:# TODO: add examples}
end
endsnippet

snippet bg "background" b
background do
  ${1:# TODO: add examples}
end
endsnippet

snippet /to hc/ "have css matcher" r
to have_css('$1'$0)
endsnippet

snippet /to ht/ "have text matcher" r
to have_text('$1')
endsnippet
