-- [nfnl] Compiled from fnl/plugins/sexp.fnl by https://github.com/Olical/nfnl, do not edit.
local _local_1_ = require("nfnl.module")
local autoload = _local_1_["autoload"]
local which_key = autoload("which-key")
local filetypes = {"clojure", "fennel", "scheme", "lisp", "timl"}
local function register_keymaps(_2_)
  local buf = _2_["buf"]
  which_key.add({{"=", group = "indent"}, {"==", "<Plug>(sexp_indent)", buffer = buf, desc = "indent form"}, {"=-", "<Plug>(sexp_indent_top)", buffer = buf, desc = "indent root form"}, {"<", group = "backward"}, {"<(", "<Plug>(sexp_capture_prev_element)", buffer = buf, desc = "capture previous element"}, {"<)", "<Plug>(sexp_emit_tail_element)", buffer = buf, desc = "emit tail element"}, {"<e", "<Plug>(sexp_swap_element_backward)", buffer = buf, desc = "swap element backward"}, {"<f", "<Plug>(sexp_swap_list_backward)", buffer = buf, desc = "swap form backward"}, {"<I", "<Plug>(sexp_insert_at_list_head)", buffer = buf, desc = "insert at form head"}, {">", group = "forward"}, {">(", "<Plug>(sexp_emit_head_element)", buffer = buf, desc = "emit head element"}, {">)", "<Plug>(sexp_capture_next_element)", buffer = buf, desc = "capture next element"}, {">e", "<Plug>(sexp_swap_element_forward)", buffer = buf, desc = "swap element forward"}, {">f", "<Plug>(sexp_swap_list_forward)", buffer = buf, desc = "swap form forward"}, {">I", "<Plug>(sexp_insert_at_list_tail)", buffer = buf, desc = "insert at form tail"}, {"a", group = "around"}, {"ae", "<Plug>(sexp_outer_element)", buffer = buf, desc = "around element", mode = {"x", "o"}}, {"af", "<Plug>(sexp_outer_list)", buffer = buf, desc = "a form", mode = {"x", "o"}}, {"aF", "<Plug>(sexp_outer_top_list)", buffer = buf, desc = "a root form", mode = {"x", "o"}}, {"as", "a\"", buffer = buf, desc = "around string", mode = {"x", "o"}}, {"i", group = "inner"}, {"ie", "<Plug>(sexp_inner_element)", buffer = buf, desc = "around element", mode = {"x", "o"}}, {"if", "<Plug>(sexp_inner_list)", buffer = buf, desc = "a form", mode = {"x", "o"}}, {"iF", "<Plug>(sexp_inner_top_list)", buffer = buf, desc = "a root form", mode = {"x", "o"}}, {"is", "i\"", buffer = buf, desc = "around string", mode = {"x", "o"}}, {"[[", "<Plug>(sexp_move_to_prev_top_element)", buffer = buf, desc = "previous root", mode = {"n", "x", "o"}}, {"]]", "<Plug>(sexp_move_to_next_top_element)", buffer = buf, desc = "next root", mode = {"n", "x", "o"}}, {"(", "<Plug>(sexp_move_to_prev_bracket)", buffer = buf, desc = "previous bracket", mode = {"n", "x", "o"}}, {")", "<Plug>(sexp_move_to_next_bracket)", buffer = buf, desc = "next bracket", mode = {"n", "x", "o"}}, {"B", "<Plug>(sexp_move_to_prev_element_head)", buffer = buf, desc = "previous element head", mode = {"n", "x", "o"}}, {"W", "<Plug>(sexp_move_to_next_element_head)", buffer = buf, desc = "next element head", mode = {"n", "x", "o"}}, {"gE", "<Plug>(sexp_move_to_prev_element_tail)", buffer = buf, desc = "previous element tail", mode = {"n", "x", "o"}}, {"E", "<Plug>(sexp_move_to_next_element_tail)", buffer = buf, desc = "next element tail", mode = {"n", "x", "o"}}, {"<LocalLeader>x", group = "transform"}, {"<LocalLeader>xd", "<Plug>(sexp_splice_list)", buffer = buf, desc = "splice form"}, {"<LocalLeader>xs", "<Plug>(sexp_convolute)", buffer = buf, desc = "convolute surrounding forms"}, {"<LocalLeader>xo", group = "raise"}, {"<LocalLeader>xoe", "<Plug>(sexp_raise_element)", buffer = buf, desc = "raise element"}, {"<LocalLeader>xof", "<Plug>(sexp_raise_list)", buffer = buf, desc = "raise form"}, {"<LocalLeader>[", group = "previous"}, {"<LocalLeader>[(", "<Plug>(sexp_flow_to_prev_open)", buffer = buf, desc = "previous opening delimiter", mode = {"n", "x"}}, {"<LocalLeader>[)", "<Plug>(sexp_flow_to_prev_close)", buffer = buf, desc = "previous closing delimiter", mode = {"n", "x"}}, {"<LocalLeader>[e", "<Plug>(sexp_select_prev_element)", buffer = buf, desc = "select previous element", mode = {"n", "x"}}, {"<LocalLeader>[h", "<Plug>(sexp_flow_to_prev_leaf_head)", buffer = buf, desc = "previous leaf head", mode = {"n", "x"}}, {"<LocalLeader>[l", "<Plug>(sexp_flow_to_prev_leaf_tail)", buffer = buf, desc = "previous leaf tail", mode = {"n", "x"}}, {"<LocalLeader>]", group = "next"}, {"<LocalLeader>](", "<Plug>(sexp_flow_to_next_open)", buffer = buf, desc = "next opening delimiter", mode = {"n", "x"}}, {"<LocalLeader>])", "<Plug>(sexp_flow_to_next_close)", buffer = buf, desc = "next closing delimiter", mode = {"n", "x"}}, {"<LocalLeader>]e", "<Plug>(sexp_select_next_element)", buffer = buf, desc = "select next element", mode = {"n", "x"}}, {"<LocalLeader>]h", "<Plug>(sexp_flow_to_next_leaf_head)", buffer = buf, desc = "next leaf head", mode = {"n", "x"}}, {"<LocalLeader>]l", "<Plug>(sexp_flow_to_next_leaf_tail)", buffer = buf, desc = "next leaf tail", mode = {"n", "x"}}, {"<LocalLeader>w", group = "wrap"}, {"<LocalLeader>we", group = "element"}, {"<LocalLeader>we(", "<Plug>(sexp_round_head_wrap_element)", buffer = buf, desc = "wrap element round head", mode = {"n", "x"}}, {"<LocalLeader>we)", "<Plug>(sexp_round_tail_wrap_element)", buffer = buf, desc = "wrap element round tail", mode = {"n", "x"}}, {"<LocalLeader>we[", "<Plug>(sexp_square_head_wrap_element)", buffer = buf, desc = "wrap element square head", mode = {"n", "x"}}, {"<LocalLeader>we]", "<Plug>(sexp_square_tail_wrap_element)", buffer = buf, desc = "wrap element square tail", mode = {"n", "x"}}, {"<LocalLeader>we{", "<Plug>(sexp_curly_head_wrap_element)", buffer = buf, desc = "wrap element curly head", mode = {"n", "x"}}, {"<LocalLeader>we}", "<Plug>(sexp_curly_tail_wrap_element)", buffer = buf, desc = "wrap element curly tail", mode = {"n", "x"}}, {"<LocalLeader>wf", group = "form"}, {"<LocalLeader>wf(", "<Plug>(sexp_round_head_wrap_list)", buffer = buf, desc = "wrap form round head", mode = {"n", "x"}}, {"<LocalLeader>wf)", "<Plug>(sexp_round_tail_wrap_list)", buffer = buf, desc = "wrap form round tail", mode = {"n", "x"}}, {"<LocalLeader>wf[", "<Plug>(sexp_square_head_wrap_list)", buffer = buf, desc = "wrap form square head", mode = {"n", "x"}}, {"<LocalLeader>wf]", "<Plug>(sexp_square_tail_wrap_list)", buffer = buf, desc = "wrap form square tail", mode = {"n", "x"}}, {"<LocalLeader>wf{", "<Plug>(sexp_curly_head_wrap_list)", buffer = buf, desc = "wrap form curly head", mode = {"n", "x"}}, {"<LocalLeader>wf}", "<Plug>(sexp_curly_tail_wrap_list)", buffer = buf, desc = "wrap form curly tail", mode = {"n", "x"}}})
  vim.keymap.set("i", "(", "<Plug>(sexp_insert_opening_round)", {buffer = buf, remap = true, silent = true})
  vim.keymap.set("i", "[", "<Plug>(sexp_insert_opening_square)", {buffer = buf, remap = true, silent = true})
  vim.keymap.set("i", "{", "<Plug>(sexp_insert_opening_curly)", {buffer = buf, remap = true, silent = true})
  vim.keymap.set("i", ")", "<Plug>(sexp_insert_closing_round)", {buffer = buf, remap = true, silent = true})
  vim.keymap.set("i", "]", "<Plug>(sexp_insert_closing_square)", {buffer = buf, remap = true, silent = true})
  vim.keymap.set("i", "}", "<Plug>(sexp_insert_closing_curly)", {buffer = buf, remap = true, silent = true})
  vim.keymap.set("i", "\"", "<Plug>(sexp_insert_double_quote)", {buffer = buf, remap = true, silent = true})
  return vim.keymap.set("i", "<BS>", "<Plug>(sexp_insert_backspace)", {buffer = buf, remap = true, silent = true})
end
local function init()
  vim.g.sexp_filetypes = ""
  return nil
end
local function config()
  local g = vim.api.nvim_create_augroup("plugins_sexp", {clear = true})
  return vim.api.nvim_create_autocmd("FileType", {callback = register_keymaps, group = g, pattern = filetypes})
end
return {"guns/vim-sexp", ft = filetypes, init = init, config = config}
